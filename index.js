require('dotenv').config()
const Telegraf = require('telegraf')
const Stage = require('telegraf/stage')
const Scene = require('telegraf/scenes/base')
const Extra = require('telegraf/extra')
const Markup = require('telegraf/markup')
const AnyCase = require('telegraf-anycase-commands')
const WizardScene = require('telegraf/scenes/wizard')
const { leave } = Stage
const axios = require('axios')
const mongoose = require('mongoose')
const { TelegrafMongoSession } = require('telegraf-session-mongodb')
//const { MongoClient } = require('mongodb')

const BOT_TOKEN = process.env.BOT_TOKEN || '';
const PORT = process.env.PORT || 3000;
const URL = process.env.URL || 'https://roy-leader-school.herokuapp.com';

let msg = {}
let notify = []
let local = 'ru'

const connection = mongoose.connect(`mongodb+srv://${process.env.DBUSER}:${process.env.DBPASSWORD}@${process.env.DBNAME}.mongodb.net/stay_away?retryWrites=true&w=majority`, {useNewUrlParser: true, useUnifiedTopology: true })
mongoose.set('useCreateIndex', true)
mongoose.set('useFindAndModify', false)

const db = mongoose.connection
const Games = require('./models/games');
const Sessions = require('./models/session');
const Cards = require('./cards');

const maxCost = 90
const maxTime = 120
const maxPlayers = 12
const minPlayers = 4

const header = 'AgACAgQAAxkDAAIBOV6c-a9W55WH4t5cSy-wTNNMB3CWAAJEqzEbgMjsUKkovlWBSlbe_jF8I10AAwEAAwIAA3gAAzRwAAIYBA'
const rules = [  
  /*{ type:'photo', media: 'AgACAgQAAxkDAAM3XpzDNHkJD_h0RnZFe-MQCVQgqPcAAqeqMRssxOxQyVpgBkqf15YjlbcbAAQBAAMCAANtAAPKtQUAARgE'}, */
  { type:'photo', media: 'AgACAgQAAxkDAAM5XpzDNEX6sxg-lMS6j83ZGlpq7WgAAgOrMRvu3OxQTtuUAjP8a-nqJbYbAAQBAAMCAANtAANaswUAARgE'}, 
  { type:'photo', media: 'AgACAgQAAxkDAAM4XpzDNFUzplomVsb1h6Fxa7VyOq0AAkerMRv0fexQ4x1-u5lxciGLgd0iXQADAQADAgADbQAD3_gAAhgE'}, 
  { type:'photo', media: 'AgACAgQAAxkDAAM2XpzDNOHL-ivfi5OoS3Cz-SkkMRAAAlKrMRtH1-xQYBpzWrBgjyujx88iXQADAQADAgADbQADr_0AAhgE'}, 
  { type:'photo', media: 'AgACAgQAAxkDAAM0XpzDNG6q8h0VESJr8P94Mnk2UKUAAgWrMRtBsexQpBqBLVmbnKImsd4hXQADAQADAgADbQADS-oCAAEYBA'}, 
  { type:'photo', media: 'AgACAgQAAxkDAAM1XpzDNGHy_1M_TA--gG7A6CdR1vsAAj2rMRtcSOxQuhGi5zNp_8lYcvciXQADAQADAgADbQADRP4AAhgE'}, 
  { type:'photo', media: 'AgACAgQAAxkDAAM6XpzDNgv8xJJaqBgQdp8x9qTtSYIAAmGrMRtQV-xQ-VFABSF2peAo-PgiXQADAQADAgADbQADcP4AAhgE'}, 
  { type:'photo', media: 'AgACAgQAAxkDAAM7XpzDOJgMkaYJk4ZmhExDfBF9b0IAAg-rMRsPku1QIdlS0Q7xFbKERLYbAAQBAAMCAANtAAPysQUAARgE'}
]

//const mainDescription = `¬´–ù–µ—á—Ç–æ¬ª –∏–∑ –≥–ª—É–±–æ–∫–æ–π –±–µ–∑–¥–Ω—ã! –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã. –ò–≥—Ä–∞ –æ—Ç 4—Ö –¥–æ 12 —á–µ–ª–æ–≤–µ–∫. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –ø–æ–∑–æ–≤–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å!"`
const mainDescription = ``

const createRoomDescription = `–í –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: 

1) <b>–û—Ç–∫—Ä—ã—Ç–∞—è/–∑–∞–∫—Ä—ã—Ç–∞—è</b> - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –º–æ–∂–µ—Ç –∫—Ç–æ —É–≥–æ–¥–Ω–æ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.

2) <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è/–Ω–∞ BIP</b> - —Å—Ç–∞–≤–∫–∞ –≤ BIP, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∏—à–µ—Ç—Å—è —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤. üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ —Ä–∞–∑–¥–µ–ª–∏—Ç –ø–æ–±–µ–¥–∏–≤—à–∞—è –∫–æ–º–∞–Ω–¥–∞/–∏–≥—Ä–æ–∫–∏.

3) <b>–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç/–±–µ–∑ —á–∞—Ç–∞</b> - —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≤ –±–æ—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã/–∑–∞–ø—Ä–µ—â–µ–Ω—ã.

4) <b>–†–µ–∂–∏–º –∏–≥—Ä—ã:</b>
  üß† –ë–µ–∑—É–º–Ω—ã–π ("–ù–µ—á—Ç–æ" –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤ –∫–æ–ª–æ–¥–µ)
  üëª –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–û–±—ã—á–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞)
  ‚ò†Ô∏è –ú–µ—Å—Ç—å (–ò–≥—Ä–∞ –Ω–∞ –≤—ã–±—ã–≤–∞–Ω–∏–µ)

5) <b>–í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥</b> - –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∏–≥—Ä—ã, —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ —É—Å–ø–µ–≤—à–∏–π —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥–∞, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—ã–±—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è <b>¬´–ù–µ—á—Ç–æ¬ª</b>.

6) <b>–ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤.</b> –í—ã –º–æ–∂–µ—Ç–µ –Ω–µ —Å–æ–±–∏—Ä–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–π—Ç–∏ –∏–≥—Ä–∞—Ç—å —Ä–∞–Ω—å—à–µ, –ø—Ä–æ–≤–µ–¥—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ (–ø–æ—è–≤–ª–µ—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–±–µ—Ä–µ—Ç—Å—è 4 —É—á–∞—Å—Ç–Ω–∏–∫–∞)
`

const rulesDescription = `<b>–í—ã—à–µ –≤ ${rules.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö - –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã ¬´–ù–µ—á—Ç–æ¬ª</b>

–í —Ç–µ–ª–µ–≥—Ä–∞–º –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º–Ω–æ–≥–∏–µ –º–æ–º–µ–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –º–µ—Ö–∞–Ω–∏–∫–∞ –∏–≥—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–∞–∫ —á—Ç–æ, —á—Ç–æ–±—ã –≤–Ω–∏–∫–Ω—É—Ç—å –≤ —Å—É—Ç—å –∏–≥—Ä—ã, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å <b>—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å 6 –ø–æ 9</b>.

–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∏–≥—Ä–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö, –∞ –≤—Å—é —Ä—É—Ç–∏–Ω—É –≤–æ–∑—å–º–µ—Ç –Ω–∞ —Å–µ–±—è <b>–∏–≥—Ä–æ–≤–æ–π –±–æ—Ç</b>!`

const aboutDescription = `–ë–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –Ω–µ —Å–∫—É—á–∞—Ç—å –Ω–∞ COVID-19 –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ :)

–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞, –∏–ª–∏ –æ—Å–≤–µ–∂–∏—Ç–µ –∑–Ω–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã, –µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –∏–≥—Ä–∞–ª–∏.

–ü–æ—Ç–æ–º —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é. –î–ª—è –Ω–∞—á–∞–ª–∞ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –∏–≥—Ä—ã, —Ä–∞–∑–º–µ—Ä–æ–º 4-6 —á–µ–ª–æ–≤–µ–∫, —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ö–æ–¥–∞ –ø–æ 80-120 —Å–µ–∫—É–Ω–¥ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º —á–∞—Ç–æ–º –¥–ª—è –æ–±—â–µ–Ω–∏—è. 

–ï—Å–ª–∏ –≤—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ –±–æ—Ç –∏ –æ–Ω –ø–µ—Ä–µ—à–ª–µ—Ç –µ–≥–æ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã. –¢–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ —Å—Ç–∞—Ä—Ç–µ –∏–ª–∏ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ :)

–ü–æ –æ–ø—ã—Ç—É –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞ –∏–≥—Ä –¥–∞–µ—Ç—Å—è –Ω–µ –ª–µ–≥–∫–æ. –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∑–∞ —Ç–µ –∏–ª–∏ –∏–Ω—ã–µ —Ä–æ–ª–∏, –∏–ª–∏ –∫–∞–∫ –∏ –∫–æ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã. –ù–æ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ—Ö–∞–Ω–∏–∫–∏ –∏–≥—Ä—ã.

–Ø –≤—ã–±—Ä–∞–ª —ç—Ç—É –∏–≥—Ä—É –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑ –∑–∞ —Å–≤—è–∑–∏ —Å –∫–∞—Ä–∞–Ω—Ç–∏–Ω–æ–º. –û–Ω–∞ –º–Ω–µ –ø–æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏–∑—É–µ–º–æ–π –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞. –í –±–æ—Ç–µ –∏—Å—á–µ–∑–∞—é—Ç —Ç–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã, –∫–∞–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å–∞–∂–∏–≤–∞—Ç—å—Å—è —Å –º–µ—Å—Ç–∞ –Ω–∞ –º–µ—Å—Ç–æ, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –∫–∞—Ä—Ç—ã, –≥–æ—Ç–æ–≤–∏—Ç—å –∫–∞—Ä—Ç—ã –∫ —Ä–∞–∑–¥–∞—á–µ, —Å–æ–±–ª—é–¥–∞—Ç—å –∑–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∂–µ—Å—Ç–∫–∏—Ö –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã –∏ –ø—Ä–æ—á–∏–µ –º–æ–º–µ–Ω—Ç—ã.

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –∏ —á–µ–º—É –ª–∏–±–æ –µ—â–µ - @Salcez

–î–æ–Ω–∞—Ç—ã –º–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å—é–¥–∞ :)
<pre>Mx09e4f7559762ee545e50fef86a718d55326532e0</pre>
`

const roomDescription = (game) => ''

//const roomsDescription = `–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–Ω–∞—Ç—ã:`
const roomsDescription = ``

const mainKeyboard = Extra.HTML().markup((m) =>
  m.inlineKeyboard([
    [m.callbackButton('–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'create_room')],
    [m.callbackButton('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', 'rooms')],
    [m.callbackButton('–î–∞–π –º–Ω–µ –∫–∞—Ä—Ç—ã!', 'cards')],
    [m.callbackButton('–°–∏–º—É–ª—è—Ü–∏—è —Ö–æ–¥–∞!', 'turn')],
    [m.callbackButton('–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', 'rules')],
    [
      m.callbackButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings'),
      m.callbackButton('–û –±–æ—Ç–µ', 'about'),
    ]
  ]))

const to_menu = Extra.HTML().markup((m) =>
  m.inlineKeyboard([
    [
      m.callbackButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'menu'),
    ]
  ]))

const to_extra = (keyboard) => {
  return { reply_markup: { 'inline_keyboard': keyboard } }
}

const newRoomKeyboard = (settings) => Extra.HTML().markup(Markup.inlineKeyboard([
  [
    Markup.callbackButton(settings.lock ? 'üîí –ó–∞–∫—Ä—ã—Ç–∞—è' : 'üîì –û—Ç–∫—Ä—ã—Ç–∞—è', 'set_lock'),
    Markup.callbackButton(settings.cost > 0 ? `‚ìÇÔ∏è –ù–∞ ${settings.cost} BIP` : 'üëå –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è', 'set_cost')
  ], [
    Markup.callbackButton(settings.silence ? 'ü§´ –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç' : 'üí¨ –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç', 'set_silence'),
    Markup.callbackButton(settings.mode == 1 ? 'üß† –ë–µ–∑—É–º–Ω—ã–π' : (settings.mode == 2 ? 'üßü‚Äç‚ôÇÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç' : '‚ò†Ô∏è –ú–µ—Å—Ç—å'), 'set_mode')
  ], [
    Markup.callbackButton(`‚è± ${settings.time} —Å–µ–∫ –Ω–∞ —Ö–æ–¥`, 'set_time'),
    Markup.callbackButton(`üë§ ${settings.players} –∏–≥—Ä–æ–∫–æ–≤`, 'set_players'),
  ], [
    Markup.callbackButton('–ù–∞–∑–∞–¥', 'back'),
    Markup.callbackButton('–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É', 'set_room'),
  ]
]))

const roomsKeyboard = (rooms, id) => {
  return Extra.HTML().markup((m) => {
    let list = []
    list.push([m.callbackButton('–û–±–Ω–æ–≤–∏—Ç—å', 'rooms')])

    rooms.forEach(room => {
      let isMember = room.members.filter(obj => obj.chat_id == id).length > 0
      let row = (isMember ? '‚úÖ ' : '') +
        ('üë§ ' + (room.members.length ? room.members.length : 0) + '/' + room.settings.players) + ' ' +
        (room.settings.mode == 1 ? 'üß† ' : (room.settings.mode == 2 ? 'üßü‚Äç‚ôÇÔ∏è ' : '‚ò†Ô∏è ')) + 
        (room.settings.time + '—Å ') +
        (room.settings.silence ? 'ü§´ ' : 'üí¨ ') + 
        (room.creatorName ? room.creatorName : room.creator) + 
        (room.settings.cost > 0 ? ' ‚ìÇÔ∏è' + room.settings.cost : '')

      list.push([m.callbackButton(row, 'show_room_' + room._id)])
    })
      
    list.push([m.callbackButton('–ù–∞–∑–∞–¥', 'back')])
    return m.inlineKeyboard(list)
  })
}

const currentGame = (game, id) => {
  let isAuthor = game.creator == id
  let isMember = game.members.filter(obj => obj.chat_id == id).length > 0

  return Extra.HTML().markup((m) => {
    let list = []
    let row = []
    
    row.push(m.callbackButton(game.settings.cost > 0 ? game.settings.cost + '‚ìÇÔ∏è' : '', 'fake_cost'))
    row.push(m.callbackButton(game.settings.silence ? 'ü§´' : 'üí¨', 'fake_silence'))
    row.push(m.callbackButton(game.settings.mode == 1 ? 'üß†' : (game.settings.mode == 2 ? 'üßü‚Äç‚ôÇÔ∏è' : '‚ò†Ô∏è'), 'fake_mode'))
    row.push(m.callbackButton(game.settings.time + '—Å', 'fake_time'))
    row.push(m.callbackButton(game.members.length + '/' + game.settings.players + 'üë§', 'fake_players'))
    if(isAuthor && game.members.length == 0)
      row.push(m.callbackButton('‚ùå', 'delete_room_' + game._id))

    list.push(row)

    if(game.members.length > 0)
      list.push([m.callbackButton('–û–±–Ω–æ–≤–∏—Ç—å', 'show_room_' + game._id), m.callbackButton('üïπ –°–æ–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤!', 'vote_room_' + game._id)])
    else
      list.push([m.callbackButton('–û–±–Ω–æ–≤–∏—Ç—å', 'show_room_' + game._id)])

    game.members.forEach( member => {
      list.push([
        m.urlButton((member.name ? member.name : '') + (member.username ? ' @' + member.username : member.chat_id), 't.me/' + member.username)
      ])
    })
    let empty_spaces = game.settings.players - game.members.length

    if(empty_spaces > 0)
      for (var i = empty_spaces - 1; i >= 0; i--) {
        list.push([m.switchToChatButton('–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ', game._id)])
      }

    let bottomRow = []
    bottomRow.push(m.callbackButton('–ö –∫–æ–º–Ω–∞—Ç–∞–º', 'rooms'))
    if(!isMember) {
      bottomRow.push(m.callbackButton('ü§ù –ó–∞–π—Ç–∏ –≤ –∏–≥—Ä—É', 'join_room_' + game._id))
    } else if(isMember) {
      bottomRow.push(m.callbackButton('üëã –ù–µ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å', 'left_room_' + game._id))
    }

    list.push(bottomRow)
    list.push([m.callbackButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')])
    return m.inlineKeyboard(list)
  })
}

const getRandom = (max) => Math.floor(Math.random() * Math.floor(max))

const makeUsersFree = (game) => {
  Sessions
    .updateMany(
      { 'data.user_room': game._id }, 
      { $unset: { 'data.user_room': 1 } }
    )
    .catch(e => console.log(e))
}

// mainMenu
const mainMenu = new Scene('mainMenu')
mainMenu.enter(ctx => {
  ctx.replyWithPhoto(header, mainKeyboard.load({ caption: mainDescription }))
})

/* –ü—Ä–∞–≤–∏–ª–∞ */
mainMenu.action('rules', async ctx => {
  await ctx.deleteMessage()
  await ctx.replyWithMediaGroup(rules, Extra.load({ caption: mainDescription }))
  ctx.session.read_rules = true
  await ctx.replyWithPhoto(header, to_menu)
})

/*  –û –±–æ—Ç–µ */
mainMenu.action('about', async ctx => {
  await ctx.deleteMessage()
  ctx.replyWithHTML(aboutDescription, to_menu)
})

/* –í–µ—Ä–Ω—É—Ç—åc—è –≤ –º–µ–Ω—é */
mainMenu.action('menu', async ctx => {
  await ctx.deleteMessage()
  await ctx.replyWithPhoto(header, mainKeyboard.load({ caption: mainDescription }))
})

mainMenu.action('settings', async ctx => {
  ctx.answerCbQuery('–≠—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç :(')
})

/* –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É */
mainMenu.action('create_room', async ctx => {
  console.log(ctx.session)
  if(ctx.session.read_rules)  
    if(!ctx.session.user_room) {
      if(!ctx.session.new_room)
        ctx.session.new_room = {
          lock: false,
          cost: 0,
          silence: false,
          mode: 1,
          time: 15,
          players: 4
        }
      ctx.editMessageCaption(createRoomDescription, newRoomKeyboard(ctx.session.new_room))
    } else {
      ctx.answerCbQuery('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å/—É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!')
    }
  else
    ctx.answerCbQuery('–í—ã –Ω–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã!')
})
mainMenu.action('set_lock', async ctx => {
  ctx.session.new_room.lock = !ctx.session.new_room.lock
  ctx.editMessageCaption(createRoomDescription, newRoomKeyboard(ctx.session.new_room))
})
mainMenu.action('set_cost', async ctx => {
  ctx.session.new_room.cost = ctx.session.new_room.cost < maxCost ? ctx.session.new_room.cost + 15 : 0
  ctx.editMessageCaption(createRoomDescription, newRoomKeyboard(ctx.session.new_room))
})
mainMenu.action('set_silence', async ctx => {
  ctx.session.new_room.silence = !ctx.session.new_room.silence
  ctx.editMessageCaption(createRoomDescription, newRoomKeyboard(ctx.session.new_room))
})
mainMenu.action('set_mode', async ctx => {
  ctx.session.new_room.mode = ctx.session.new_room.mode < 3 ? ctx.session.new_room.mode+1 : 1
  ctx.editMessageCaption(createRoomDescription, newRoomKeyboard(ctx.session.new_room))
})
mainMenu.action('set_time', async ctx => {
  ctx.session.new_room.time = ctx.session.new_room.time < maxTime ? ctx.session.new_room.time + 15 : 15
  ctx.editMessageCaption(createRoomDescription, newRoomKeyboard(ctx.session.new_room))
})
mainMenu.action('set_players', async ctx => {
  ctx.session.new_room.players = ctx.session.new_room.players < maxPlayers ? ctx.session.new_room.players + 1 : minPlayers
  ctx.editMessageCaption(createRoomDescription, newRoomKeyboard(ctx.session.new_room))
})
mainMenu.action('set_room', async ctx => {
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
  const newGame = new Games({
    creator: ctx.from.id,
    creatorName: ctx.from.username ? '@' + ctx.from.username : ctx.from.first_name,
    members: [
      { 
        chat_id: ctx.from.id,
        username: ctx.from.username,
        name: ctx.from.first_name
      }
    ],
    settings: ctx.session.new_room,
    created: new Date()
  })

  await newGame.save().then(async game => {
    ctx.session.user_room = game._id.toString()
    await ctx.editMessageCaption(roomDescription(game), currentGame(game, ctx.from.id))
  }).catch(e => console.log(e))
  
})
mainMenu.action('back', async ctx => {
  ctx.editMessageCaption(mainDescription, mainKeyboard)
})

/* –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç */
mainMenu.action('rooms', async ctx => {
  Games
    .find()
    .limit(10)
    .sort({'createdAt': -1})
    .select('creator creatorName members settings created createdAt')
    .then(rooms => {
      if(rooms.length)
        ctx.editMessageCaption(roomsDescription, roomsKeyboard(rooms, ctx.from.id)).catch(e => e.code == 400 ? ctx.answerCbQuery('–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å –ø—Ä–æ—à–ª–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!') : null)
      else
        ctx.answerCbQuery('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç! –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é!')
    })
})

/* –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–Ω–∞—Ç—ã */
mainMenu.action(/show_room_(.+)/, ctx => {
  Games
    .findById(ctx.match[1])
    .select('creator creatorName members settings created createdAt')
    .then(game => {      
      ctx.editMessageCaption(roomDescription(game), currentGame(game, ctx.from.id))
      .catch(e => e.code == 400 ? ctx.answerCbQuery('–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å –ø—Ä–æ—à–ª–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!') : null)
    })
    .catch(e => { console.log(e); ctx.answerCbQuery('–ü–æ—Ö–æ–∂–µ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')})
})

/* –°–æ–æ–±—â–µ–Ω–∏—è */
mainMenu.action('fake_cost', ctx => {
  ctx.answerCbQuery('–¢—É—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ BIP.')
})
mainMenu.action('fake_players', ctx => {
  ctx.answerCbQuery('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ.')
})
mainMenu.action('fake_time', ctx => {
  ctx.answerCbQuery('–í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞.')
})
mainMenu.action('fake_mode', ctx => {
  ctx.answerCbQuery('–†–µ–∂–∏–º –∏–≥—Ä—ã: üß† - –ë–µ–∑—É–º–Ω—ã–π üëª - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π  ‚ò†Ô∏è –ú–µ—Å—Ç—å')
})
mainMenu.action('fake_silence', ctx => {
  ctx.answerCbQuery('–û–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏: üí¨ - –†–∞–∑—Ä–µ—à–µ–Ω–æ ü§´ - –ó–∞–ø—Ä–µ—â–µ–Ω–æ')
})

/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É */
mainMenu.action(/join_room_(.+)/, async ctx => {
  if(ctx.session.read_rules)
    await Games
      .findById(ctx.match[1])
      .select('creator creatorName members settings created createdAt')
      .then(async game => {
        if(game.members.length === game.settings.players)
          return ctx.answerCbQuery('–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ!')  

        /*game.members.push({
          chat_id: ctx.from.id,
          username: ctx.from.username,
          name: ctx.from.first_name
        })*/
        game.members.push({
          chat_id: ctx.from.id,
          username: ctx.from.username,
          name: getRandom(34343) + ' ' + ctx.from.first_name
        })

        await game.save()
          .then(updated => {
            ctx.session.user_room = updated._id.toString()
            ctx.editMessageCaption(roomDescription(updated), currentGame(updated, ctx.from.id)).catch(e => console.error(e.code))
          })
          .catch(e => console.log(e))
      })
      .catch(e => ctx.answerCbQuery('–ü–æ—Ö–æ–∂–µ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'))
  else
    ctx.answerCbQuery('–í—ã –Ω–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã!')
})

/* –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã */
mainMenu.action(/left_room_(.+)/, async ctx => {
  await Games
    .findById(ctx.match[1])
    .select('creator creatorName members settings created createdAt')
    .then(async game => {
      game.members = game.members.filter(member => member.chat_id != ctx.from.id)
      await game
        .save()
        .then(updated => {
          delete ctx.session['user_room']
          ctx.editMessageCaption(roomDescription(updated), currentGame(updated, ctx.from.id)).catch(e => console.error(e.code))
        })
        .catch(e => console.log(e))
    })
    .catch(e => ctx.answerCbQuery('–ü–æ—Ö–æ–∂–µ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'))
})

/* –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ */
mainMenu.action(/vote_room_(.+)/, ctx => {
  console.log('vote_room')
  Games
    .findById(ctx.match[1])
    .select('creator creatorName members settings created createdAt')
    .then(game => {
      console.log(game)
      ctx.replyWithPoll('–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–∞—Ç—å?', [
          '–î–∞, —è –≥–æ—Ç–æ–≤', 
          '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç',
          '–°–º–æ–≥—É —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç',
          '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –∑–∞–Ω—è—Ç 20+',
          '–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ –∏–≥—Ä–æ–∫–æ–≤'
        ],
        { is_anonymous: false }
      ).then(poll => {
        game.members.forEach(member => {
          if(member.chat_id !== ctx.from.id)
            ctx.telegram.forwardMessage(member.chat_id, ctx.from.id, poll.message_id)
              .then(r => console.log(r))
              .catch(e => console.log(e))  
        })
      }).catch(e => console.log(e))
    })
    .catch(e => ctx.answerCbQuery('–ü–æ—Ö–æ–∂–µ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'))
})
mainMenu.on('poll_answer', (ctx) => ctx.reply('Poll answer' + ctx.pollAnswer.toString()))
mainMenu.action(/delete_room_(.+)/, async ctx => {
  if(ctx.session.delete_action > 2) {
    await Games.deleteOne({ _id: ctx.match[1] })
      .then(r => {
        ctx.answerCbQuery('–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞!')
        ctx.editMessageCaption(mainDescription, mainKeyboard)
        ctx.session.delete_action = 0
        makeUsersFree(ctx.match[1])
      })
      .catch(e => ctx.answerCbQuery('–ù–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É!'))
  } else {
    ctx.session.delete_action = typeof ctx.session.delete_action !== 'undefined' ? parseInt(ctx.session.delete_action+1) : 1
    ctx.answerCbQuery('–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ùå –µ—â–µ ' + (4-ctx.session.delete_action) + ' —Ä–∞–∑(–∞)!')
  }
})
mainMenu.on('message', (ctx, next) => {
  console.log(ctx.message)
  if(ctx.session.user_room && (ctx.message.text || ctx.message.sticker || ctx.messsage.photo) && !ctx.message.entities) {
    Games
      .findById(ctx.session.user_room)
      .select('members')
      .then(game => {
        game.members.forEach(member => {
          if(member.chat_id !== ctx.from.id)
            //ctx.telegram.forwardMessage(member.chat_id, ctx.from.id, ctx.message.message_id)
            ctx.telegram.forwardMessage(399509, ctx.from.id, ctx.message.message_id)
              .then(r => console.log(r))
              .catch(e => console.log(e))
        })
      })
  } else {
    console.log('–ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö')
    console.log(ctx.session.user_room)
    return next()
  }
})



// Scenes
const stage = new Stage()

stage.register(mainMenu)

stage.command('cancel', leave())

// Command and ohter
const bot = new Telegraf(BOT_TOKEN)
AnyCase.apply(bot)
let session
bot.use((...args) => session.middleware(...args))
bot.use(stage.middleware())

bot.use((ctx, next) => {
  const start = new Date();
  if(ctx.updateType !== 'poll_answer') {
    console.log(ctx.updateType + ' ' + ctx.from.username || ctx.from.first_name, ': ', ctx.message ? ctx.message.text : ctx.updateType )  
    if (ctx.session && !ctx.session.id) {
        ctx.session.key = `${ctx.chat.id}:${ctx.from.id}`
        ctx.session.id = ctx.from.id
        ctx.session.username = ctx.from.username
        ctx.session.first_name = ctx.from.first_name
        ctx.session.last_name = ctx.from.last_name
        ctx.session.language_code = ctx.from.language_code
        ctx.session.is_bot = ctx.from.is_bot
        ctx.session.io = []
    }
    return next().then(() => {
      const ms = new Date() - start
      console.log('response time %sms', ms)
    })
  }
})

const turnInlineKeyboard = (ctx) => {
  let buttons = []
  buttons.push(Markup.callbackButton(ctx.session.game.mode ? '‚ñ∫ –°—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É ‚óÑ' : '–°—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É', 'change_action_mode'))
  buttons.push(Markup.callbackButton(ctx.session.game.mode ? '–°–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—É' : '‚ñ∫ –°–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—É ‚óÑ', 'change_action_mode'))
  
  ctx.session.game.cards.forEach(card => {
    if((ctx.session.game.mode && card.type == 'action') || 
      (!ctx.session.game.mode && card.type != 'infection') ||
      (!ctx.session.game.mode && !ctx.session.game.infected && card.type == 'infection'))
      buttons.push(
        Markup.callbackButton(
          `"${card.name}"`, 
          (ctx.session.game.mode ? 'play_card_' : 'drop_card_') + card.id)
        )

  })
  
  const wrapFn = (btn, index, currentRow) => currentRow.length >= 2
  let currentRow = []
  let index = 0
  const result = []
  for (const btn of buttons.filter((button) => !button.hide)) {
    if (wrapFn(btn, index, currentRow) && currentRow.length > 0) {
      result.push(currentRow)
      currentRow = []
    }
    currentRow.push(btn)
    index++
  }
  if (currentRow.length > 0) {
    result.push(currentRow)
  }


  //list.push([m.callbackButton('–ù–∞–∑–∞–¥', 'back')])
  
  console.log(result)
  return result
}

const random_item = (items) => items[Math.floor(Math.random()*items.length)]

const turn = async (ctx) => {

  let random_card = random_item(Cards.filter(card => card.players <= 5))
  console.log(random_card)

  if(!ctx.session.game.cards) {
    ctx.session.game.cards = []
    while (ctx.session.game.cards.length !== 4) {
      let card = Cards[getRandom(110)]
      if(card.type !== 'panic')
        ctx.session.game.cards.push(card)
    } 
  }


  if(random_card.type == 'panic') {
    //–°–æ–æ–±—â–∏—Ç—å –≤—Å–µ–º —á—Ç–æ –≤—ã–ø–∞–ª–∞ –ø–∞–Ω–∏–∫–∞
    await ctx.replyWithPhoto(random_card.media, to_extra(turnInlineKeyboard(ctx, ctx.session.game.cards)))
  } else {
    ctx.session.game.cards.unshift(random_card)
  }

  await ctx.replyWithMediaGroup(ctx.session.game.cards.map((card) => {return { 'type': 'photo', 'media': card.media }}))
  let cards = ctx.session.game.cards.reduce((acc, val) => `${acc}<b>${val.name}</b> - ${val.description}\n\n`, '')
  await ctx.replyWithHTML(cards, to_extra(turnInlineKeyboard(ctx, ctx.session.game.cards)))
}

bot.action('change_action_mode', async (ctx) => {
  ctx.session.game.mode = !ctx.session.game.mode
  ctx.editMessageReplyMarkup({
      inline_keyboard: turnInlineKeyboard(ctx, ctx.session.game.cards)
  })
})

bot.action(/play_card_(.+)/, async (ctx) => {
  ctx.session.game.cards = ctx.session.game.cards.filter(card => card.id != ctx.match[1])
  await turn(ctx)
})

bot.action(/drop_card_(.+)/, async (ctx) => {
  ctx.session.game.cards = ctx.session.game.cards.filter(card => card.id != ctx.match[1])
  await turn(ctx)
})

bot.action('turn', async (ctx) => {
  ctx.session.game = {}
  await turn(ctx)
})

bot.command('turn', async (ctx) => {
  ctx.session.game = {}
  await turn(ctx)
})


const cards = async (ctx) => {
  let hand = []
  while (hand.length !== 4) {
    let card = Cards[getRandom(110)]
    console.log(card)
    if(card.type !== 'panic' && card.type !== 'infection')
      hand.push(card)
  }
  await ctx.replyWithMediaGroup(hand.map((card) => {return { 'type': 'photo', 'media': card.media }}))
  let cards = hand.reduce((acc, val) => `${acc}<b>${val.name}</b> - ${val.description}\n\n`, '')
  let cardsKeyboard = Extra.HTML().markup((m) => {
    let list = []
    hand.forEach(card => {
      if(card.type == 'action')
        list.push(m.callbackButton(card.name, 'play_card_' + card.id))
    })
    //list.push([m.callbackButton('–ù–∞–∑–∞–¥', 'back')])
    return m.inlineKeyboard(list)
  })
  await ctx.replyWithHTML(cards, cardsKeyboard)
}

bot.action('cards', async (ctx) => {
  await cards(ctx)
})

bot.command('cards', async (ctx) => {
  await cards(ctx)
})

bot.command('kick', async (ctx) => {
  Games
    .findOne({ creator:ctx.from.id })
    .select('creator creatorName members settings created createdAt')
    .then(game => {
      console.log(game)
      if(game) {
        ctx.replyWithPhoto(header, Extra.HTML().markup((m) => {
          let list = []
          game.members.forEach(member => {
            list.push([
              m.callbackButton((member.name ? member.name : '') + (member.username ? ' @' + member.username : member.chat_id), 'kick_user_' + member.chat_id)
            ])
          })
          list.push([m.callbackButton('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')])
          return m.inlineKeyboard(list)
        }))
      } else {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä!')
      }
    })
})

bot.action(/kick_user_(.+)/, (ctx) => {
  Games
    .findOne({ creator:ctx.from.id })
    .select('creator creatorName members settings created createdAt')
    .then(game => {
      game.members = game.members.filter(member => member.chat_id != ctx.match[1])
      game
        .save()
        .then(updated => {
          
          //ctx.session.user_room = false

          ctx.editMessageCaption('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã:', Extra.HTML().markup((m) => {
            let list = []
            updated.members.forEach(member => {
              list.push([
                m.callbackButton((member.name ? member.name : '') + (member.username ? ' @' + member.username : member.chat_id), 'kick_user_' + member.chat_id)
              ])
            })
            return m.inlineKeyboard(list)
          }))
          ctx.replyWithPhoto(header, currentGame(updated, ctx.from.id).load({ caption: roomDescription(updated) }))
        })
        .catch(e => console.log(e))
    })
    .catch(e => ctx.answerCbQuery('–ü–æ—Ö–æ–∂–µ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'))
})

bot.start( async (ctx) => {
  console.log('start')
  if(ctx.startPayload)
    Games
      .findById(ctx.startPayload)
      .select('creator creatorName members settings created createdAt')
      .then(game => ctx.replyWithPhoto(header, currentGame(game, ctx.from.id)))
      .catch(e => ctx.reply('–ü–æ—Ö–æ–∂–µ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!'))
  else 
    ctx.scene.enter('mainMenu')
})

bot.on("inline_query", async ctx => {
  let gameId = ctx.update.inline_query.query
  Games
    .findById(gameId)
    .select('creator creatorName members settings created createdAt')
    .then(game => {
      ctx.answerInlineQuery([{
        id: 1,
        type: 'article',
        title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∏–≥—Ä—É',
        input_message_content: {
          message_text: ctx.from.first_name || ctx.from.username + " –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç—É"
        },
        reply_markup: {
          inline_keyboard: [
            [{
              text: '–í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É',
              url: 't.me/stay_away_game_bot?start=' + gameId,
             }]
          ]
        } 
      }],{
        is_personal: true,
        cache_time: 0,
      })
    })
    .catch(e => {
      ctx.answerInlineQuery([{
        id: 2,
        type: 'article',
        title: '–ù–µ—Ç —Ç–∞–∫–æ–π –∏–≥—Ä—ã!',
        input_message_content: {
          message_text: '–ó–∞–π–¥–∏—Ç–µ –≤ –±–æ—Ç @stay_away_game_bot –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!'
        }
      }]);
    })
});

bot.settings(async (ctx) => {
  await ctx.setMyCommands([
    {
      command: '/start',
      description: '–û—Ç–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'
    },
    {
      command: '/kick',
      description: '–ò—Å–∫–ª—é—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã'
    },
    {
      command: '/report',
      description: '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä–æ–∫–∞'
    },
    {
      command: '/cancel',
      description: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã'
    }
  ])
  return ctx.reply('Ok')
})

bot.help(async (ctx) => {
  const commands = await ctx.getMyCommands()
  const info = commands.reduce((acc, val) => `${acc}/${val.command} - ${val.description}\n`, '')
  return ctx.reply(info)
})

bot.on('dice', (ctx) => ctx.reply(`Value: ${ctx.message.dice.value}`))

// bot.on('message', (ctx) => ctx.telegram.sendCopy(ctx.chat.id, ctx.message, Extra.markup(keyboard)))


// –í—Å–µ –ø—Ä–æ—á–µ–µ
bot.use((ctx) => {
  ctx.replyWithHTML(`<b>${ctx.from.first_name}</b>: ${ctx.text}`)
})

bot.action('delete', ({ deleteMessage }) => deleteMessage())

bot.catch(error => {
  console.log('telegraf error', error.response, error.parameters, error.on || error)
})

db.on('error', console.error.bind(console, 'connection error:'))
db.once('open', function() {

  Games.countDocuments({})
    .then((r) => {
      console.log('–ò–≥—Ä –≤—Å–µ–≥–æ: ' + r)
    })
    .catch((e) => {
      console.log(e)
    })
  
  session = new TelegrafMongoSession(db, {
    collectionName: 'sessions',
    sessionName: 'session'
  })

  if(session) {
    if (process.env.WEBHOOKS === 'true') {
        bot.telegram.setWebhook(`${URL}/bot${BOT_TOKEN}`)
        bot.startWebhook(`/bot${BOT_TOKEN}`, null, PORT)
    } else {
        bot.telegram.deleteWebhook()
        bot.startPolling()
    }
    /*bot.telegram.sendMessage(399509, 'Bot is up and running!')*/
  } else {
    console.log('Session error!');
  }
})
